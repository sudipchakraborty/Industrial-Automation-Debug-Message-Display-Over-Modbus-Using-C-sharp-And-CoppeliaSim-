while(1)
    {
       // scib_Test_send();
      //TesterBay_Handler();


        bfr[0]='C';
        bfr[1]='O';
        bfr[2]='U';
        bfr[3]='N';
        bfr[4]='T';
        bfr[5]='=';
        ConvertInt2Ascii(val,&bfr[6]);

        msg(&bfr[0]);
        for(i=0;i<50000;i++);
        val++;
    }
//________________________________________________________________________________________________________________________________
void msg(unsigned char *bfr)
{
    unsigned char char_count;
    unsigned char temp[100];
    unsigned char i;

    char_count=0;
    do{
       temp[char_count]=*bfr;
       char_count++;
       bfr++;
    }while(*bfr!=0);

    i=char_count%2;
    if(i==1)
    {
        temp[char_count]=0x00;
        char_count++;
    }
    Modbus_Multiple_Register_Write(200,0, &temp[0],char_count);
}
//________________________________________________________________________________________________________________________________
void Modbus_Multiple_Register_Write(unsigned char device_id,unsigned int addr, unsigned char *data,unsigned char count)
{
    long TimeOut;
    unsigned int crc;
    unsigned char i;
    unsigned char temp[0xff];
    unsigned int reg_qty;
    unsigned char pkt_len;

    temp[0]=device_id;   // slave address
    temp[1]=0x10;        // function code

    temp[3]=(unsigned char)(0x00ff & addr);       // addr Lo
    addr=addr>>8;
    temp[2]=addr;        // Addr Hi

    reg_qty=count/2;
    temp[5]=(unsigned char)(0x00ff & reg_qty);       // quantity of register(int16) lo
    reg_qty=reg_qty>>8;
    temp[4]=(unsigned char)reg_qty;                  // quantity of register(int16) Hi

    temp[6]=count;                                   // byte count
    for(pkt_len=7;pkt_len<(7+count);pkt_len++)
    {
        i=*data;
        temp[pkt_len]=i;
        data++;
    }
    crc=Get_CRC(&temp[0],pkt_len);
    i=(unsigned char)(0x00ff & crc);        // CRC Lo
    temp[pkt_len]=i;
    crc=crc>>8;
    pkt_len++;
    temp[pkt_len]=(unsigned char)crc;        // CRC Hi

    pkt_len++;
    temp[pkt_len]=0x00;

    SCIB_Purge();
    scib_send(&temp[0],pkt_len);
}
//________________________________________________________________________________________________________________________________
unsigned int Get_CRC(unsigned char* data, unsigned char len)
{
    unsigned char i = 0;
    unsigned int crc = 0xFFFF;
    for (i = 0; i < len; i++)
    crc = process_crc16(crc, data[i]);
    return crc; // must be 0
}
//________________________________________________________________________________________________________________________________
unsigned int process_crc16(unsigned int crc, unsigned char a)
{
    int i;
    crc ^= a;
    for (i = 0; i < 8; ++i)
    {
        if (crc & 1)
        crc = (crc >> 1) ^ 0xA001;
        else
        crc = (crc >> 1);
    }
    return crc;
}
//________________________________________________________________________________________________________________________________

